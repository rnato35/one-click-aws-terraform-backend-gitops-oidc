name: terraform

on:
  pull_request:
    branches: [ env/dev, env/staging, env/prod ]
    paths:
      - 'infra/envs/**'
      - '.github/workflows/terraform.yaml'
  push:
    branches: [ env/dev, env/staging, env/prod ]
    paths:
      - 'infra/envs/**'
      - '.github/workflows/terraform.yaml'

permissions:
  id-token: write
  contents: read
  issues: write

env:
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  TF_VERSION: "1.6.6"
  AWS_REGION: ${{ vars.TF_BACKEND_REGION }}

jobs:
  plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: ${{ github.base_ref == 'env/dev' && 'dev' || github.base_ref == 'env/staging' && 'staging' || github.base_ref == 'env/prod' && 'prod' || '' }}
    defaults:
      run:
        shell: bash
        working-directory: infra/envs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init (remote backend)
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TF_BACKEND_BUCKET }}" \
            -backend-config="key=global/terraform.tfstate" \
            -backend-config="region=${{ vars.TF_BACKEND_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=${{ vars.TF_BACKEND_DDB_TABLE }}" \
            -backend-config="kms_key_id=${{ vars.TF_BACKEND_KMS_KEY_ID }}" \
            -backend-config="acl=private" \
            -backend-config="workspace_key_prefix=envs"

      - name: Terraform Fmt Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Select Workspace
        run: |
          case "${GITHUB_BASE_REF}" in
            env/dev) ENV="dev" ;;
            env/staging) ENV="staging" ;;
            env/prod) ENV="prod" ;;
            *) ENV="dev" ;;
          esac
          terraform workspace list | grep -q " $ENV$" || terraform workspace new "$ENV"
          terraform workspace select "$ENV"

      - name: Terraform Plan
        run: |
          case "${GITHUB_BASE_REF}" in
            env/dev) VARS=dev/terraform.tfvars ;;
            env/staging) VARS=staging/terraform.tfvars ;;
            env/prod) VARS=prod/terraform.tfvars ;;
            *) VARS=dev/terraform.tfvars ;;
          esac
          terraform plan -var-file="$VARS" -var "region=${AWS_REGION}" -out=tfplan

  apply:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'env/dev' && 'dev' || github.ref_name == 'env/staging' && 'staging' || github.ref_name == 'env/prod' && 'prod' || '' }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
        working-directory: infra/envs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init (remote backend)
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TF_BACKEND_BUCKET }}" \
            -backend-config="key=global/terraform.tfstate" \
            -backend-config="region=${{ vars.TF_BACKEND_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=${{ vars.TF_BACKEND_DDB_TABLE }}" \
            -backend-config="kms_key_id=${{ vars.TF_BACKEND_KMS_KEY_ID }}" \
            -backend-config="acl=private" \
            -backend-config="workspace_key_prefix=envs"

      - name: Terraform Fmt Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Select Workspace
        run: |
          case "${GITHUB_REF_NAME}" in
            env/dev) ENV="dev" ;;
            env/staging) ENV="staging" ;;
            env/prod) ENV="prod" ;;
          esac
          terraform workspace list | grep -q " $ENV$" || terraform workspace new "$ENV"
          terraform workspace select "$ENV"

      - name: Wait for manual approval before production
        if: github.ref_name == 'env/prod'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: rnato35
          minimum-approvals: 1
          issue-title: "Manual approval required for production apply"
          issue-body: "Please approve this production deployment."
          exclude-workflow-initiator-as-approver: false

      - name: Terraform Plan
        run: |
          case "${GITHUB_REF_NAME}" in
            env/dev) VARS=dev/terraform.tfvars ;;
            env/staging) VARS=staging/terraform.tfvars ;;
            env/prod) VARS=prod/terraform.tfvars ;;
          esac
          terraform plan -var-file="$VARS" -var "region=${AWS_REGION}" -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
